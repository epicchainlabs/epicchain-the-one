// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ABIFunction Tests - No Parameters Array 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Array",
        "returnType": Object {
          "type": "Array",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type ArrayEvent = never

export interface ArraySmartContract<TClient extends Client = Client> extends SmartContract<TClient, ArrayEvent> {
  readonly Array: {
  (options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<Array<boolean>, ArrayEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, ArrayEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface ArrayMigrationSmartContract {
  readonly Array: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, ArrayEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Array_claim 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "claim": true,
        "name": "Array_claim",
        "returnType": Object {
          "type": "Array",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { ClaimTransaction, Client, GetOptions, SmartContract, TransactionOptions, TransactionReceipt, TransactionResult } from '@neo-one/client';



export type Array_claimEvent = never

export interface Array_claimSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Array_claimEvent> {
  readonly Array_claim: {
  (options?: TransactionOptions): Promise<TransactionResult<TransactionReceipt, ClaimTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
}


export interface Array_claimMigrationSmartContract {
  readonly Array_claim: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Array_completeSend 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "completeSend": true,
        "name": "Array_completeSend",
        "returnType": Object {
          "type": "Array",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Array_completeSendEvent = never

export interface Array_completeSendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Array_completeSendEvent> {
  readonly Array_completeSend: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<Array<boolean>, Array_completeSendEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Array_completeSendMigrationSmartContract {
  readonly Array_completeSend: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Array_constant 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "constant": true,
        "name": "Array_constant",
        "returnType": Object {
          "type": "Array",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, SmartContract } from '@neo-one/client';



export type Array_constantEvent = never

export interface Array_constantSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Array_constantEvent> {
  readonly Array_constant: () => Promise<Array<boolean>>;
}


export interface Array_constantMigrationSmartContract {
  readonly Array_constant: () => Promise<Array<boolean>>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Array_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Array_receive",
        "receive": true,
        "returnType": Object {
          "type": "Array",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Array_receiveEvent = never

export interface Array_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Array_receiveEvent> {
  readonly Array_receive: {
  (options?: InvokeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<Array<boolean>, Array_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Array_receiveMigrationSmartContract {
  readonly Array_receive: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Array_refundAssets 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Array_refundAssets",
        "refundAssets": true,
        "returnType": Object {
          "type": "Array",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Array_refundAssetsEvent = never

export interface Array_refundAssetsSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Array_refundAssetsEvent> {
  readonly Array_refundAssets: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<Array<boolean>, Array_refundAssetsEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Array_refundAssetsMigrationSmartContract {
  readonly Array_refundAssets: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Array_send 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Array_send",
        "returnType": Object {
          "type": "Array",
          "value": Object {
            "type": "Boolean",
          },
        },
        "send": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult, Transfer } from '@neo-one/client';



export type Array_sendEvent = never

export interface Array_sendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Array_sendEvent> {
  readonly Array_send: {
  (transfer: Transfer, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<Array<boolean>, Array_sendEvent>, InvocationTransaction>>;
  readonly confirmed: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Array_sendMigrationSmartContract {
  readonly Array_send: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Array_sendUnsafe 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Array_sendUnsafe",
        "returnType": Object {
          "type": "Array",
          "value": Object {
            "type": "Boolean",
          },
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Array_sendUnsafeEvent = never

export interface Array_sendUnsafeSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Array_sendUnsafeEvent> {
  readonly Array_sendUnsafe: {
  (options?: InvokeSendUnsafeTransactionOptions): Promise<TransactionResult<InvokeReceipt<Array<boolean>, Array_sendUnsafeEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Array_sendUnsafeMigrationSmartContract {
  readonly Array_sendUnsafe: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Array_sendUnsafe_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Array_sendUnsafe_receive",
        "receive": true,
        "returnType": Object {
          "type": "Array",
          "value": Object {
            "type": "Boolean",
          },
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Array_sendUnsafe_receiveEvent = never

export interface Array_sendUnsafe_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Array_sendUnsafe_receiveEvent> {
  readonly Array_sendUnsafe_receive: {
  (options?: InvokeSendUnsafeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<Array<boolean>, Array_sendUnsafe_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Array_sendUnsafe_receiveMigrationSmartContract {
  readonly Array_sendUnsafe_receive: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<Array<boolean>, Array_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean",
        "returnType": Object {
          "optional": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type BooleanEvent = never

export interface BooleanSmartContract<TClient extends Client = Client> extends SmartContract<TClient, BooleanEvent> {
  readonly Boolean: {
  (options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean | undefined, BooleanEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, BooleanEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface BooleanMigrationSmartContract {
  readonly Boolean: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, BooleanEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean 2`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean",
        "returnType": Object {
          "forwardedValue": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type BooleanEvent = never

export interface BooleanSmartContract<TClient extends Client = Client> extends SmartContract<TClient, BooleanEvent> {
  readonly Boolean: {
  (options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean, BooleanEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, BooleanEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly forwardBooleanReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | BooleanEvent> : never;
  (result: ContractParameter): boolean
}
}


export interface BooleanMigrationSmartContract {
  readonly Boolean: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, BooleanEvent> & { readonly transaction: InvocationTransaction}>;
  readonly forwardBooleanReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | BooleanEvent> : never;
  (result: ContractParameter): boolean
}
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_claim 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "claim": true,
        "name": "Boolean_claim",
        "returnType": Object {
          "optional": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { ClaimTransaction, Client, GetOptions, SmartContract, TransactionOptions, TransactionReceipt, TransactionResult } from '@neo-one/client';



export type Boolean_claimEvent = never

export interface Boolean_claimSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_claimEvent> {
  readonly Boolean_claim: {
  (options?: TransactionOptions): Promise<TransactionResult<TransactionReceipt, ClaimTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
}


export interface Boolean_claimMigrationSmartContract {
  readonly Boolean_claim: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_claim 2`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "claim": true,
        "name": "Boolean_claim",
        "returnType": Object {
          "forwardedValue": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { ClaimTransaction, Client, ContractParameter, GetOptions, InvokeReceipt, SmartContract, TransactionOptions, TransactionReceipt, TransactionResult } from '@neo-one/client';



export type Boolean_claimEvent = never

export interface Boolean_claimSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_claimEvent> {
  readonly Boolean_claim: {
  (options?: TransactionOptions): Promise<TransactionResult<TransactionReceipt, ClaimTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
  readonly forwardBooleanClaimReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_claimEvent> : never;
  (result: ContractParameter): boolean
}
}


export interface Boolean_claimMigrationSmartContract {
  readonly Boolean_claim: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
  readonly forwardBooleanClaimReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_claimEvent> : never;
  (result: ContractParameter): boolean
}
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_completeSend 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "completeSend": true,
        "name": "Boolean_completeSend",
        "returnType": Object {
          "optional": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Boolean_completeSendEvent = never

export interface Boolean_completeSendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_completeSendEvent> {
  readonly Boolean_completeSend: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean | undefined, Boolean_completeSendEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Boolean_completeSendMigrationSmartContract {
  readonly Boolean_completeSend: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_completeSend 2`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "completeSend": true,
        "name": "Boolean_completeSend",
        "returnType": Object {
          "forwardedValue": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Boolean_completeSendEvent = never

export interface Boolean_completeSendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_completeSendEvent> {
  readonly Boolean_completeSend: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean, Boolean_completeSendEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly forwardBooleanCompleteSendReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_completeSendEvent> : never;
  (result: ContractParameter): boolean
}
}


export interface Boolean_completeSendMigrationSmartContract {
  readonly Boolean_completeSend: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
  readonly forwardBooleanCompleteSendReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_completeSendEvent> : never;
  (result: ContractParameter): boolean
}
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_constant 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "constant": true,
        "name": "Boolean_constant",
        "returnType": Object {
          "optional": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, SmartContract } from '@neo-one/client';



export type Boolean_constantEvent = never

export interface Boolean_constantSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_constantEvent> {
  readonly Boolean_constant: () => Promise<boolean | undefined>;
}


export interface Boolean_constantMigrationSmartContract {
  readonly Boolean_constant: () => Promise<boolean | undefined>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_constant 2`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "constant": true,
        "name": "Boolean_constant",
        "returnType": Object {
          "forwardedValue": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, InvokeReceipt, SmartContract } from '@neo-one/client';



export type Boolean_constantEvent = never

export interface Boolean_constantSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_constantEvent> {
  readonly Boolean_constant: () => Promise<boolean>;
  readonly forwardBooleanConstantReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_constantEvent> : never;
  (result: ContractParameter): boolean
}
}


export interface Boolean_constantMigrationSmartContract {
  readonly Boolean_constant: () => Promise<boolean>;
  readonly forwardBooleanConstantReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_constantEvent> : never;
  (result: ContractParameter): boolean
}
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean_receive",
        "receive": true,
        "returnType": Object {
          "optional": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Boolean_receiveEvent = never

export interface Boolean_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_receiveEvent> {
  readonly Boolean_receive: {
  (options?: InvokeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean | undefined, Boolean_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Boolean_receiveMigrationSmartContract {
  readonly Boolean_receive: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_receive 2`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean_receive",
        "receive": true,
        "returnType": Object {
          "forwardedValue": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, GetOptions, InvocationTransaction, InvokeReceipt, InvokeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Boolean_receiveEvent = never

export interface Boolean_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_receiveEvent> {
  readonly Boolean_receive: {
  (options?: InvokeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean, Boolean_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly forwardBooleanReceiveReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_receiveEvent> : never;
  (result: ContractParameter): boolean
}
}


export interface Boolean_receiveMigrationSmartContract {
  readonly Boolean_receive: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_receiveEvent> & { readonly transaction: InvocationTransaction}>;
  readonly forwardBooleanReceiveReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_receiveEvent> : never;
  (result: ContractParameter): boolean
}
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_refundAssets 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean_refundAssets",
        "refundAssets": true,
        "returnType": Object {
          "optional": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Boolean_refundAssetsEvent = never

export interface Boolean_refundAssetsSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_refundAssetsEvent> {
  readonly Boolean_refundAssets: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean | undefined, Boolean_refundAssetsEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Boolean_refundAssetsMigrationSmartContract {
  readonly Boolean_refundAssets: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_refundAssets 2`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean_refundAssets",
        "refundAssets": true,
        "returnType": Object {
          "forwardedValue": true,
          "type": "Boolean",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Boolean_refundAssetsEvent = never

export interface Boolean_refundAssetsSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_refundAssetsEvent> {
  readonly Boolean_refundAssets: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean, Boolean_refundAssetsEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly forwardBooleanRefundAssetsReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_refundAssetsEvent> : never;
  (result: ContractParameter): boolean
}
}


export interface Boolean_refundAssetsMigrationSmartContract {
  readonly Boolean_refundAssets: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
  readonly forwardBooleanRefundAssetsReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_refundAssetsEvent> : never;
  (result: ContractParameter): boolean
}
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_send 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean_send",
        "returnType": Object {
          "optional": true,
          "type": "Boolean",
        },
        "send": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult, Transfer } from '@neo-one/client';



export type Boolean_sendEvent = never

export interface Boolean_sendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_sendEvent> {
  readonly Boolean_send: {
  (transfer: Transfer, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean | undefined, Boolean_sendEvent>, InvocationTransaction>>;
  readonly confirmed: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Boolean_sendMigrationSmartContract {
  readonly Boolean_send: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_send 2`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean_send",
        "returnType": Object {
          "forwardedValue": true,
          "type": "Boolean",
        },
        "send": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult, Transfer } from '@neo-one/client';



export type Boolean_sendEvent = never

export interface Boolean_sendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_sendEvent> {
  readonly Boolean_send: {
  (transfer: Transfer, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean, Boolean_sendEvent>, InvocationTransaction>>;
  readonly confirmed: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly forwardBooleanSendReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_sendEvent> : never;
  (result: ContractParameter): boolean
}
}


export interface Boolean_sendMigrationSmartContract {
  readonly Boolean_send: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_sendEvent> & { readonly transaction: InvocationTransaction}>;
  readonly forwardBooleanSendReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_sendEvent> : never;
  (result: ContractParameter): boolean
}
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_sendUnsafe 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean_sendUnsafe",
        "returnType": Object {
          "optional": true,
          "type": "Boolean",
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Boolean_sendUnsafeEvent = never

export interface Boolean_sendUnsafeSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_sendUnsafeEvent> {
  readonly Boolean_sendUnsafe: {
  (options?: InvokeSendUnsafeTransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean | undefined, Boolean_sendUnsafeEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Boolean_sendUnsafeMigrationSmartContract {
  readonly Boolean_sendUnsafe: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_sendUnsafe 2`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean_sendUnsafe",
        "returnType": Object {
          "forwardedValue": true,
          "type": "Boolean",
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Boolean_sendUnsafeEvent = never

export interface Boolean_sendUnsafeSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_sendUnsafeEvent> {
  readonly Boolean_sendUnsafe: {
  (options?: InvokeSendUnsafeTransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean, Boolean_sendUnsafeEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly forwardBooleanSendUnsafeReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_sendUnsafeEvent> : never;
  (result: ContractParameter): boolean
}
}


export interface Boolean_sendUnsafeMigrationSmartContract {
  readonly Boolean_sendUnsafe: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
  readonly forwardBooleanSendUnsafeReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_sendUnsafeEvent> : never;
  (result: ContractParameter): boolean
}
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_sendUnsafe_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean_sendUnsafe_receive",
        "receive": true,
        "returnType": Object {
          "optional": true,
          "type": "Boolean",
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Boolean_sendUnsafe_receiveEvent = never

export interface Boolean_sendUnsafe_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_sendUnsafe_receiveEvent> {
  readonly Boolean_sendUnsafe_receive: {
  (options?: InvokeSendUnsafeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean | undefined, Boolean_sendUnsafe_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Boolean_sendUnsafe_receiveMigrationSmartContract {
  readonly Boolean_sendUnsafe_receive: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean | undefined, Boolean_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Boolean_sendUnsafe_receive 2`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Boolean_sendUnsafe_receive",
        "receive": true,
        "returnType": Object {
          "forwardedValue": true,
          "type": "Boolean",
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Boolean_sendUnsafe_receiveEvent = never

export interface Boolean_sendUnsafe_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Boolean_sendUnsafe_receiveEvent> {
  readonly Boolean_sendUnsafe_receive: {
  (options?: InvokeSendUnsafeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<boolean, Boolean_sendUnsafe_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly forwardBooleanSendUnsafeReceiveReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_sendUnsafe_receiveEvent> : never;
  (result: ContractParameter): boolean
}
}


export interface Boolean_sendUnsafe_receiveMigrationSmartContract {
  readonly Boolean_sendUnsafe_receive: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<boolean, Boolean_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
  readonly forwardBooleanSendUnsafeReceiveReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<boolean, E | Boolean_sendUnsafe_receiveEvent> : never;
  (result: ContractParameter): boolean
}
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters ForwardValue 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "ForwardValue",
        "returnType": Object {
          "type": "ForwardValue",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, ForwardValue, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type ForwardValueEvent = never

export interface ForwardValueSmartContract<TClient extends Client = Client> extends SmartContract<TClient, ForwardValueEvent> {
  readonly ForwardValue: {
  (options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<ContractParameter, ForwardValueEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValueEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface ForwardValueMigrationSmartContract {
  readonly ForwardValue: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValueEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters ForwardValue_claim 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "claim": true,
        "name": "ForwardValue_claim",
        "returnType": Object {
          "type": "ForwardValue",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { ClaimTransaction, Client, ForwardValue, GetOptions, SmartContract, TransactionOptions, TransactionReceipt, TransactionResult } from '@neo-one/client';



export type ForwardValue_claimEvent = never

export interface ForwardValue_claimSmartContract<TClient extends Client = Client> extends SmartContract<TClient, ForwardValue_claimEvent> {
  readonly ForwardValue_claim: {
  (options?: TransactionOptions): Promise<TransactionResult<TransactionReceipt, ClaimTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
}


export interface ForwardValue_claimMigrationSmartContract {
  readonly ForwardValue_claim: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters ForwardValue_completeSend 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "completeSend": true,
        "name": "ForwardValue_completeSend",
        "returnType": Object {
          "type": "ForwardValue",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, ForwardValue, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type ForwardValue_completeSendEvent = never

export interface ForwardValue_completeSendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, ForwardValue_completeSendEvent> {
  readonly ForwardValue_completeSend: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<ContractParameter, ForwardValue_completeSendEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface ForwardValue_completeSendMigrationSmartContract {
  readonly ForwardValue_completeSend: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters ForwardValue_constant 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "constant": true,
        "name": "ForwardValue_constant",
        "returnType": Object {
          "type": "ForwardValue",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, ForwardValue, SmartContract } from '@neo-one/client';



export type ForwardValue_constantEvent = never

export interface ForwardValue_constantSmartContract<TClient extends Client = Client> extends SmartContract<TClient, ForwardValue_constantEvent> {
  readonly ForwardValue_constant: () => Promise<ContractParameter>;
}


export interface ForwardValue_constantMigrationSmartContract {
  readonly ForwardValue_constant: () => Promise<ContractParameter>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters ForwardValue_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "ForwardValue_receive",
        "receive": true,
        "returnType": Object {
          "type": "ForwardValue",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, ForwardValue, GetOptions, InvocationTransaction, InvokeReceipt, InvokeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type ForwardValue_receiveEvent = never

export interface ForwardValue_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, ForwardValue_receiveEvent> {
  readonly ForwardValue_receive: {
  (options?: InvokeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<ContractParameter, ForwardValue_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface ForwardValue_receiveMigrationSmartContract {
  readonly ForwardValue_receive: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters ForwardValue_refundAssets 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "ForwardValue_refundAssets",
        "refundAssets": true,
        "returnType": Object {
          "type": "ForwardValue",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, ForwardValue, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type ForwardValue_refundAssetsEvent = never

export interface ForwardValue_refundAssetsSmartContract<TClient extends Client = Client> extends SmartContract<TClient, ForwardValue_refundAssetsEvent> {
  readonly ForwardValue_refundAssets: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<ContractParameter, ForwardValue_refundAssetsEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface ForwardValue_refundAssetsMigrationSmartContract {
  readonly ForwardValue_refundAssets: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters ForwardValue_send 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "ForwardValue_send",
        "returnType": Object {
          "type": "ForwardValue",
        },
        "send": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, ForwardValue, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult, Transfer } from '@neo-one/client';



export type ForwardValue_sendEvent = never

export interface ForwardValue_sendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, ForwardValue_sendEvent> {
  readonly ForwardValue_send: {
  (transfer: Transfer, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<ContractParameter, ForwardValue_sendEvent>, InvocationTransaction>>;
  readonly confirmed: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface ForwardValue_sendMigrationSmartContract {
  readonly ForwardValue_send: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters ForwardValue_sendUnsafe 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "ForwardValue_sendUnsafe",
        "returnType": Object {
          "type": "ForwardValue",
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, ForwardValue, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type ForwardValue_sendUnsafeEvent = never

export interface ForwardValue_sendUnsafeSmartContract<TClient extends Client = Client> extends SmartContract<TClient, ForwardValue_sendUnsafeEvent> {
  readonly ForwardValue_sendUnsafe: {
  (options?: InvokeSendUnsafeTransactionOptions): Promise<TransactionResult<InvokeReceipt<ContractParameter, ForwardValue_sendUnsafeEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface ForwardValue_sendUnsafeMigrationSmartContract {
  readonly ForwardValue_sendUnsafe: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters ForwardValue_sendUnsafe_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "ForwardValue_sendUnsafe_receive",
        "receive": true,
        "returnType": Object {
          "type": "ForwardValue",
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, ContractParameter, ForwardValue, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type ForwardValue_sendUnsafe_receiveEvent = never

export interface ForwardValue_sendUnsafe_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, ForwardValue_sendUnsafe_receiveEvent> {
  readonly ForwardValue_sendUnsafe_receive: {
  (options?: InvokeSendUnsafeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<ContractParameter, ForwardValue_sendUnsafe_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface ForwardValue_sendUnsafe_receiveMigrationSmartContract {
  readonly ForwardValue_sendUnsafe_receive: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<ContractParameter, ForwardValue_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Integer 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Integer",
        "returnType": Object {
          "decimals": 4,
          "type": "Integer",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type IntegerEvent = never

export interface IntegerSmartContract<TClient extends Client = Client> extends SmartContract<TClient, IntegerEvent> {
  readonly Integer: {
  (options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<BigNumber, IntegerEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, IntegerEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface IntegerMigrationSmartContract {
  readonly Integer: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, IntegerEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Integer_claim 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "claim": true,
        "name": "Integer_claim",
        "returnType": Object {
          "decimals": 4,
          "type": "Integer",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { ClaimTransaction, Client, GetOptions, SmartContract, TransactionOptions, TransactionReceipt, TransactionResult } from '@neo-one/client';



export type Integer_claimEvent = never

export interface Integer_claimSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Integer_claimEvent> {
  readonly Integer_claim: {
  (options?: TransactionOptions): Promise<TransactionResult<TransactionReceipt, ClaimTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
}


export interface Integer_claimMigrationSmartContract {
  readonly Integer_claim: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Integer_completeSend 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "completeSend": true,
        "name": "Integer_completeSend",
        "returnType": Object {
          "decimals": 4,
          "type": "Integer",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Integer_completeSendEvent = never

export interface Integer_completeSendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Integer_completeSendEvent> {
  readonly Integer_completeSend: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<BigNumber, Integer_completeSendEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Integer_completeSendMigrationSmartContract {
  readonly Integer_completeSend: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Integer_constant 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "constant": true,
        "name": "Integer_constant",
        "returnType": Object {
          "decimals": 4,
          "type": "Integer",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, SmartContract } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Integer_constantEvent = never

export interface Integer_constantSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Integer_constantEvent> {
  readonly Integer_constant: () => Promise<BigNumber>;
}


export interface Integer_constantMigrationSmartContract {
  readonly Integer_constant: () => Promise<BigNumber>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Integer_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Integer_receive",
        "receive": true,
        "returnType": Object {
          "decimals": 4,
          "type": "Integer",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Integer_receiveEvent = never

export interface Integer_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Integer_receiveEvent> {
  readonly Integer_receive: {
  (options?: InvokeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<BigNumber, Integer_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Integer_receiveMigrationSmartContract {
  readonly Integer_receive: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Integer_refundAssets 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Integer_refundAssets",
        "refundAssets": true,
        "returnType": Object {
          "decimals": 4,
          "type": "Integer",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Integer_refundAssetsEvent = never

export interface Integer_refundAssetsSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Integer_refundAssetsEvent> {
  readonly Integer_refundAssets: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<BigNumber, Integer_refundAssetsEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Integer_refundAssetsMigrationSmartContract {
  readonly Integer_refundAssets: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Integer_send 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Integer_send",
        "returnType": Object {
          "decimals": 4,
          "type": "Integer",
        },
        "send": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult, Transfer } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Integer_sendEvent = never

export interface Integer_sendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Integer_sendEvent> {
  readonly Integer_send: {
  (transfer: Transfer, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<BigNumber, Integer_sendEvent>, InvocationTransaction>>;
  readonly confirmed: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Integer_sendMigrationSmartContract {
  readonly Integer_send: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Integer_sendUnsafe 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Integer_sendUnsafe",
        "returnType": Object {
          "decimals": 4,
          "type": "Integer",
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Integer_sendUnsafeEvent = never

export interface Integer_sendUnsafeSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Integer_sendUnsafeEvent> {
  readonly Integer_sendUnsafe: {
  (options?: InvokeSendUnsafeTransactionOptions): Promise<TransactionResult<InvokeReceipt<BigNumber, Integer_sendUnsafeEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Integer_sendUnsafeMigrationSmartContract {
  readonly Integer_sendUnsafe: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Integer_sendUnsafe_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Integer_sendUnsafe_receive",
        "receive": true,
        "returnType": Object {
          "decimals": 4,
          "type": "Integer",
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Integer_sendUnsafe_receiveEvent = never

export interface Integer_sendUnsafe_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Integer_sendUnsafe_receiveEvent> {
  readonly Integer_sendUnsafe_receive: {
  (options?: InvokeSendUnsafeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<BigNumber, Integer_sendUnsafe_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Integer_sendUnsafe_receiveMigrationSmartContract {
  readonly Integer_sendUnsafe_receive: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, Integer_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Map 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Map",
        "returnType": Object {
          "key": Object {
            "decimals": 0,
            "type": "Integer",
          },
          "type": "Map",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type MapEvent = never

export interface MapSmartContract<TClient extends Client = Client> extends SmartContract<TClient, MapEvent> {
  readonly Map: {
  (options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<Map<BigNumber, boolean>, MapEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, MapEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface MapMigrationSmartContract {
  readonly Map: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, MapEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Map_claim 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "claim": true,
        "name": "Map_claim",
        "returnType": Object {
          "key": Object {
            "decimals": 0,
            "type": "Integer",
          },
          "type": "Map",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { ClaimTransaction, Client, GetOptions, SmartContract, TransactionOptions, TransactionReceipt, TransactionResult } from '@neo-one/client';



export type Map_claimEvent = never

export interface Map_claimSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Map_claimEvent> {
  readonly Map_claim: {
  (options?: TransactionOptions): Promise<TransactionResult<TransactionReceipt, ClaimTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
}


export interface Map_claimMigrationSmartContract {
  readonly Map_claim: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Map_completeSend 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "completeSend": true,
        "name": "Map_completeSend",
        "returnType": Object {
          "key": Object {
            "decimals": 0,
            "type": "Integer",
          },
          "type": "Map",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Map_completeSendEvent = never

export interface Map_completeSendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Map_completeSendEvent> {
  readonly Map_completeSend: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<Map<BigNumber, boolean>, Map_completeSendEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Map_completeSendMigrationSmartContract {
  readonly Map_completeSend: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Map_constant 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "constant": true,
        "name": "Map_constant",
        "returnType": Object {
          "key": Object {
            "decimals": 0,
            "type": "Integer",
          },
          "type": "Map",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, SmartContract } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Map_constantEvent = never

export interface Map_constantSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Map_constantEvent> {
  readonly Map_constant: () => Promise<Map<BigNumber, boolean>>;
}


export interface Map_constantMigrationSmartContract {
  readonly Map_constant: () => Promise<Map<BigNumber, boolean>>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Map_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Map_receive",
        "receive": true,
        "returnType": Object {
          "key": Object {
            "decimals": 0,
            "type": "Integer",
          },
          "type": "Map",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Map_receiveEvent = never

export interface Map_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Map_receiveEvent> {
  readonly Map_receive: {
  (options?: InvokeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<Map<BigNumber, boolean>, Map_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Map_receiveMigrationSmartContract {
  readonly Map_receive: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Map_refundAssets 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Map_refundAssets",
        "refundAssets": true,
        "returnType": Object {
          "key": Object {
            "decimals": 0,
            "type": "Integer",
          },
          "type": "Map",
          "value": Object {
            "type": "Boolean",
          },
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Map_refundAssetsEvent = never

export interface Map_refundAssetsSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Map_refundAssetsEvent> {
  readonly Map_refundAssets: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<Map<BigNumber, boolean>, Map_refundAssetsEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Map_refundAssetsMigrationSmartContract {
  readonly Map_refundAssets: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Map_send 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Map_send",
        "returnType": Object {
          "key": Object {
            "decimals": 0,
            "type": "Integer",
          },
          "type": "Map",
          "value": Object {
            "type": "Boolean",
          },
        },
        "send": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult, Transfer } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Map_sendEvent = never

export interface Map_sendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Map_sendEvent> {
  readonly Map_send: {
  (transfer: Transfer, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<Map<BigNumber, boolean>, Map_sendEvent>, InvocationTransaction>>;
  readonly confirmed: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Map_sendMigrationSmartContract {
  readonly Map_send: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Map_sendUnsafe 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Map_sendUnsafe",
        "returnType": Object {
          "key": Object {
            "decimals": 0,
            "type": "Integer",
          },
          "type": "Map",
          "value": Object {
            "type": "Boolean",
          },
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Map_sendUnsafeEvent = never

export interface Map_sendUnsafeSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Map_sendUnsafeEvent> {
  readonly Map_sendUnsafe: {
  (options?: InvokeSendUnsafeTransactionOptions): Promise<TransactionResult<InvokeReceipt<Map<BigNumber, boolean>, Map_sendUnsafeEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Map_sendUnsafeMigrationSmartContract {
  readonly Map_sendUnsafe: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Map_sendUnsafe_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Map_sendUnsafe_receive",
        "receive": true,
        "returnType": Object {
          "key": Object {
            "decimals": 0,
            "type": "Integer",
          },
          "type": "Map",
          "value": Object {
            "type": "Boolean",
          },
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';



export type Map_sendUnsafe_receiveEvent = never

export interface Map_sendUnsafe_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Map_sendUnsafe_receiveEvent> {
  readonly Map_sendUnsafe_receive: {
  (options?: InvokeSendUnsafeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<Map<BigNumber, boolean>, Map_sendUnsafe_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Map_sendUnsafe_receiveMigrationSmartContract {
  readonly Map_sendUnsafe_receive: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<Map<BigNumber, boolean>, Map_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Object 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Object",
        "returnType": Object {
          "properties": Object {
            "property": Object {
              "type": "Boolean",
            },
          },
          "type": "Object",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type ObjectEvent = never

export interface ObjectSmartContract<TClient extends Client = Client> extends SmartContract<TClient, ObjectEvent> {
  readonly Object: {
  (options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<{
      readonly 'property': boolean
    }, ObjectEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, ObjectEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface ObjectMigrationSmartContract {
  readonly Object: (options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, ObjectEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Object_claim 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "claim": true,
        "name": "Object_claim",
        "returnType": Object {
          "properties": Object {
            "property": Object {
              "type": "Boolean",
            },
          },
          "type": "Object",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { ClaimTransaction, Client, GetOptions, SmartContract, TransactionOptions, TransactionReceipt, TransactionResult } from '@neo-one/client';



export type Object_claimEvent = never

export interface Object_claimSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Object_claimEvent> {
  readonly Object_claim: {
  (options?: TransactionOptions): Promise<TransactionResult<TransactionReceipt, ClaimTransaction>>;
  readonly confirmed: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
}


export interface Object_claimMigrationSmartContract {
  readonly Object_claim: (options?: TransactionOptions & GetOptions) => Promise<TransactionReceipt & { readonly transaction: ClaimTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Object_completeSend 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "completeSend": true,
        "name": "Object_completeSend",
        "returnType": Object {
          "properties": Object {
            "property": Object {
              "type": "Boolean",
            },
          },
          "type": "Object",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Object_completeSendEvent = never

export interface Object_completeSendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Object_completeSendEvent> {
  readonly Object_completeSend: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_completeSendEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Object_completeSendMigrationSmartContract {
  readonly Object_completeSend: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_completeSendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Object_constant 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "constant": true,
        "name": "Object_constant",
        "returnType": Object {
          "properties": Object {
            "property": Object {
              "type": "Boolean",
            },
          },
          "type": "Object",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, SmartContract } from '@neo-one/client';



export type Object_constantEvent = never

export interface Object_constantSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Object_constantEvent> {
  readonly Object_constant: () => Promise<{
      readonly 'property': boolean
    }>;
}


export interface Object_constantMigrationSmartContract {
  readonly Object_constant: () => Promise<{
      readonly 'property': boolean
    }>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Object_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Object_receive",
        "receive": true,
        "returnType": Object {
          "properties": Object {
            "property": Object {
              "type": "Boolean",
            },
          },
          "type": "Object",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Object_receiveEvent = never

export interface Object_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Object_receiveEvent> {
  readonly Object_receive: {
  (options?: InvokeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Object_receiveMigrationSmartContract {
  readonly Object_receive: (options?: InvokeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Object_refundAssets 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Object_refundAssets",
        "refundAssets": true,
        "returnType": Object {
          "properties": Object {
            "property": Object {
              "type": "Boolean",
            },
          },
          "type": "Object",
        },
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, Hash256String, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Object_refundAssetsEvent = never

export interface Object_refundAssetsSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Object_refundAssetsEvent> {
  readonly Object_refundAssets: {
  (hash: Hash256String, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_refundAssetsEvent>, InvocationTransaction>>;
  readonly confirmed: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Object_refundAssetsMigrationSmartContract {
  readonly Object_refundAssets: (hash: Hash256String, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_refundAssetsEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Object_send 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Object_send",
        "returnType": Object {
          "properties": Object {
            "property": Object {
              "type": "Boolean",
            },
          },
          "type": "Object",
        },
        "send": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult, Transfer } from '@neo-one/client';



export type Object_sendEvent = never

export interface Object_sendSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Object_sendEvent> {
  readonly Object_send: {
  (transfer: Transfer, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_sendEvent>, InvocationTransaction>>;
  readonly confirmed: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Object_sendMigrationSmartContract {
  readonly Object_send: (transfer: Transfer, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_sendEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Object_sendUnsafe 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Object_sendUnsafe",
        "returnType": Object {
          "properties": Object {
            "property": Object {
              "type": "Boolean",
            },
          },
          "type": "Object",
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Object_sendUnsafeEvent = never

export interface Object_sendUnsafeSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Object_sendUnsafeEvent> {
  readonly Object_sendUnsafe: {
  (options?: InvokeSendUnsafeTransactionOptions): Promise<TransactionResult<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_sendUnsafeEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Object_sendUnsafeMigrationSmartContract {
  readonly Object_sendUnsafe: (options?: InvokeSendUnsafeTransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_sendUnsafeEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;

exports[`ABIFunction Tests - No Parameters Object_sendUnsafe_receive 1`] = `
Object {
  "inputABI": Object {
    "functions": Array [
      Object {
        "name": "Object_sendUnsafe_receive",
        "receive": true,
        "returnType": Object {
          "properties": Object {
            "property": Object {
              "type": "Boolean",
            },
          },
          "type": "Object",
        },
        "sendUnsafe": true,
      },
    ],
  },
  "types": Object {
    "ts": "import { Client, GetOptions, InvocationTransaction, InvokeReceipt, InvokeSendUnsafeReceiveTransactionOptions, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';



export type Object_sendUnsafe_receiveEvent = never

export interface Object_sendUnsafe_receiveSmartContract<TClient extends Client = Client> extends SmartContract<TClient, Object_sendUnsafe_receiveEvent> {
  readonly Object_sendUnsafe_receive: {
  (options?: InvokeSendUnsafeReceiveTransactionOptions): Promise<TransactionResult<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_sendUnsafe_receiveEvent>, InvocationTransaction>>;
  readonly confirmed: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
}


export interface Object_sendUnsafe_receiveMigrationSmartContract {
  readonly Object_sendUnsafe_receive: (options?: InvokeSendUnsafeReceiveTransactionOptions & GetOptions) => Promise<InvokeReceipt<{
      readonly 'property': boolean
    }, Object_sendUnsafe_receiveEvent> & { readonly transaction: InvocationTransaction}>;
}
",
  },
}
`;
