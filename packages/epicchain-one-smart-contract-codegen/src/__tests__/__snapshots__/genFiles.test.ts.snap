// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`genFiles Token 1`] = `
Object {
  "abi": Object {
    "js": "// tslint:disable
/* eslint-disable */
export const tokenABI = {
  events: [
    {
      name: 'transfer',
      parameters: [
        {
          name: 'from',
          optional: true,
          type: 'Address',
        },
        {
          name: 'to',
          optional: true,
          type: 'Address',
        },
        {
          decimals: 4,
          name: 'amount',
          type: 'Integer',
        },
      ],
    },
  ],
  functions: [
    {
      constant: true,
      name: 'name',
      parameters: [],
      returnType: {
        type: 'String',
      },
    },
    {
      constant: true,
      name: 'symbol',
      parameters: [],
      returnType: {
        type: 'String',
      },
    },
    {
      constant: true,
      name: 'decimals',
      parameters: [],
      returnType: {
        decimals: 0,
        type: 'Integer',
      },
    },
    {
      constant: true,
      name: 'totalSupply',
      parameters: [],
      returnType: {
        decimals: 8,
        type: 'Integer',
      },
    },
    {
      name: 'transfer',
      parameters: [
        {
          name: 'from',
          type: 'Address',
        },
        {
          name: 'to',
          type: 'Address',
        },
        {
          decimals: 8,
          name: 'value',
          type: 'Integer',
        },
        {
          name: 'args',
          rest: true,
          type: 'ForwardValue',
        },
      ],
      returnType: {
        type: 'Boolean',
      },
    },
    {
      constant: true,
      name: 'balanceOf',
      parameters: [
        {
          name: 'account',
          type: 'Address',
        },
      ],
      returnType: {
        decimals: 4,
        type: 'Integer',
      },
    },
    {
      name: 'forward',
      parameters: [
        {
          name: 'address',
          type: 'Address',
        },
        {
          name: 'args',
          rest: true,
          type: 'ForwardValue',
        },
      ],
      returnType: {
        type: 'ForwardValue',
      },
    },
    {
      constant: true,
      name: 'forwardConstant',
      parameters: [
        {
          name: 'address',
          type: 'Address',
        },
        {
          name: 'args',
          rest: true,
          type: 'ForwardValue',
        },
      ],
      returnType: {
        type: 'ForwardValue',
      },
    },
    {
      name: 'forwardForward',
      parameters: [
        {
          name: 'address',
          type: 'Address',
        },
        {
          forwardedValue: true,
          name: 'args',
          rest: true,
          type: 'ForwardValue',
        },
      ],
      returnType: {
        forwardedValue: true,
        type: 'ForwardValue',
      },
    },
    {
      constant: true,
      name: 'forwardForwardConstant',
      parameters: [
        {
          name: 'address',
          type: 'Address',
        },
        {
          forwardedValue: true,
          name: 'args',
          rest: true,
          type: 'ForwardValue',
        },
      ],
      returnType: {
        forwardedValue: true,
        type: 'ForwardValue',
      },
    },
    {
      name: 'forwardTo',
      parameters: [
        {
          decimals: 8,
          forwardedValue: true,
          name: 'first',
          type: 'Integer',
        },
        {
          decimals: 0,
          forwardedValue: true,
          name: 'second',
          type: 'Integer',
        },
      ],
      returnType: {
        decimals: 8,
        forwardedValue: true,
        type: 'Integer',
      },
    },
    {
      constant: true,
      name: 'forwardToConstant',
      parameters: [
        {
          decimals: 8,
          forwardedValue: true,
          name: 'first',
          type: 'Integer',
        },
        {
          decimals: 0,
          forwardedValue: true,
          name: 'second',
          type: 'Integer',
        },
      ],
      returnType: {
        decimals: 8,
        forwardedValue: true,
        type: 'Integer',
      },
    },
    {
      name: 'obj',
      parameters: [
        {
          name: 'bar',
          properties: {
            baz: {
              properties: {
                qux: {
                  type: 'String',
                },
              },
              type: 'Object',
            },
          },
          type: 'Object',
        },
      ],
      returnType: {
        type: 'Void',
      },
    },
  ],
};
",
    "ts": "// tslint:disable
/* eslint-disable */
import { ABI } from '@neo-one/client';

export const tokenABI: ABI = {
  events: [
    {
      name: 'transfer',
      parameters: [
        {
          name: 'from',
          optional: true,
          type: 'Address',
        },
        {
          name: 'to',
          optional: true,
          type: 'Address',
        },
        {
          decimals: 4,
          name: 'amount',
          type: 'Integer',
        },
      ],
    },
  ],
  functions: [
    {
      constant: true,
      name: 'name',
      parameters: [],
      returnType: {
        type: 'String',
      },
    },
    {
      constant: true,
      name: 'symbol',
      parameters: [],
      returnType: {
        type: 'String',
      },
    },
    {
      constant: true,
      name: 'decimals',
      parameters: [],
      returnType: {
        decimals: 0,
        type: 'Integer',
      },
    },
    {
      constant: true,
      name: 'totalSupply',
      parameters: [],
      returnType: {
        decimals: 8,
        type: 'Integer',
      },
    },
    {
      name: 'transfer',
      parameters: [
        {
          name: 'from',
          type: 'Address',
        },
        {
          name: 'to',
          type: 'Address',
        },
        {
          decimals: 8,
          name: 'value',
          type: 'Integer',
        },
        {
          name: 'args',
          rest: true,
          type: 'ForwardValue',
        },
      ],
      returnType: {
        type: 'Boolean',
      },
    },
    {
      constant: true,
      name: 'balanceOf',
      parameters: [
        {
          name: 'account',
          type: 'Address',
        },
      ],
      returnType: {
        decimals: 4,
        type: 'Integer',
      },
    },
    {
      name: 'forward',
      parameters: [
        {
          name: 'address',
          type: 'Address',
        },
        {
          name: 'args',
          rest: true,
          type: 'ForwardValue',
        },
      ],
      returnType: {
        type: 'ForwardValue',
      },
    },
    {
      constant: true,
      name: 'forwardConstant',
      parameters: [
        {
          name: 'address',
          type: 'Address',
        },
        {
          name: 'args',
          rest: true,
          type: 'ForwardValue',
        },
      ],
      returnType: {
        type: 'ForwardValue',
      },
    },
    {
      name: 'forwardForward',
      parameters: [
        {
          name: 'address',
          type: 'Address',
        },
        {
          forwardedValue: true,
          name: 'args',
          rest: true,
          type: 'ForwardValue',
        },
      ],
      returnType: {
        forwardedValue: true,
        type: 'ForwardValue',
      },
    },
    {
      constant: true,
      name: 'forwardForwardConstant',
      parameters: [
        {
          name: 'address',
          type: 'Address',
        },
        {
          forwardedValue: true,
          name: 'args',
          rest: true,
          type: 'ForwardValue',
        },
      ],
      returnType: {
        forwardedValue: true,
        type: 'ForwardValue',
      },
    },
    {
      name: 'forwardTo',
      parameters: [
        {
          decimals: 8,
          forwardedValue: true,
          name: 'first',
          type: 'Integer',
        },
        {
          decimals: 0,
          forwardedValue: true,
          name: 'second',
          type: 'Integer',
        },
      ],
      returnType: {
        decimals: 8,
        forwardedValue: true,
        type: 'Integer',
      },
    },
    {
      constant: true,
      name: 'forwardToConstant',
      parameters: [
        {
          decimals: 8,
          forwardedValue: true,
          name: 'first',
          type: 'Integer',
        },
        {
          decimals: 0,
          forwardedValue: true,
          name: 'second',
          type: 'Integer',
        },
      ],
      returnType: {
        decimals: 8,
        forwardedValue: true,
        type: 'Integer',
      },
    },
    {
      name: 'obj',
      parameters: [
        {
          name: 'bar',
          properties: {
            baz: {
              properties: {
                qux: {
                  type: 'String',
                },
              },
              type: 'Object',
            },
          },
          type: 'Object',
        },
      ],
      returnType: {
        type: 'Void',
      },
    },
  ],
};
",
  },
  "contract": Object {
    "js": "// tslint:disable
/* eslint-disable */
import { tokenABI } from './abi';
import { sourceMaps } from '../sourceMaps';

const definition = {
  networks: {
    main: {
      address: 'iamahash',
    },
  },
  abi: tokenABI,
  sourceMaps,
};

export const createTokenSmartContract = (client) => client.smartContract(definition);
",
    "ts": "// tslint:disable
/* eslint-disable */
import { Client } from '@neo-one/client';
import { TokenSmartContract } from './types';
import { tokenABI } from './abi';
import { sourceMaps } from '../sourceMaps';

const definition = {
  networks: {
    main: {
      address: 'iamahash',
    },
  },
  abi: tokenABI,
  sourceMaps,
};

export const createTokenSmartContract = <TClient extends Client>(client: TClient): TokenSmartContract<TClient> =>
  client.smartContract(definition);
",
  },
  "types": Object {
    "js": undefined,
    "ts": "// tslint:disable
/* eslint-disable */
import {
  AddressString,
  Client,
  ContractParameter,
  Event,
  ForwardOptions,
  ForwardValue,
  GetOptions,
  InvocationTransaction,
  InvokeReceipt,
  SmartContract,
  TransactionOptions,
  TransactionResult,
} from '@neo-one/client';
import BigNumber from 'bignumber.js';

export interface TokenTransferEventParameters {
  readonly from: AddressString | undefined;
  readonly to: AddressString | undefined;
  readonly amount: BigNumber;
}
export interface TokenTransferEvent extends Event<'transfer', TokenTransferEventParameters> {}
export type TokenEvent = TokenTransferEvent;

export interface TokenSmartContract<TClient extends Client = Client> extends SmartContract<TClient, TokenEvent> {
  readonly balanceOf: (account: AddressString) => Promise<BigNumber>;
  readonly decimals: () => Promise<BigNumber>;
  readonly forward: {
    <TForwardOptions extends ForwardOptions<any>>(
      address: AddressString,
      forwardOptions?: TForwardOptions,
      ...args: ForwardValue[]
    ): Promise<
      TransactionResult<
        InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>,
        InvocationTransaction
      >
    >;
    <TForwardOptions extends ForwardOptions<any>>(
      address: AddressString,
      options?: TransactionOptions,
      forwardOptions?: TForwardOptions,
      ...args: ForwardValue[]
    ): Promise<
      TransactionResult<
        InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>,
        InvocationTransaction
      >
    >;
    readonly confirmed: {
      <TForwardOptions extends ForwardOptions<any>>(
        address: AddressString,
        forwardOptions?: TForwardOptions,
        ...args: ForwardValue[]
      ): Promise<
        InvokeReceipt<
          ContractParameter,
          TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent
        > & { readonly transaction: InvocationTransaction }
      >;
      <TForwardOptions extends ForwardOptions<any>>(
        address: AddressString,
        options?: TransactionOptions & GetOptions,
        forwardOptions?: TForwardOptions,
        ...args: ForwardValue[]
      ): Promise<
        InvokeReceipt<
          ContractParameter,
          TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent
        > & { readonly transaction: InvocationTransaction }
      >;
    };
  };
  readonly forwardConstant: (
    address: AddressString,
    forwardOptions?: ForwardOptions,
    ...args: ForwardValue[]
  ) => Promise<ContractParameter>;
  readonly forwardForward: {
    <TForwardOptions extends ForwardOptions<any>>(
      address: AddressString,
      forwardOptions?: TForwardOptions,
      ...args: ForwardValue[]
    ): Promise<
      TransactionResult<
        InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>,
        InvocationTransaction
      >
    >;
    <TForwardOptions extends ForwardOptions<any>>(
      address: AddressString,
      options?: TransactionOptions,
      forwardOptions?: TForwardOptions,
      ...args: ForwardValue[]
    ): Promise<
      TransactionResult<
        InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>,
        InvocationTransaction
      >
    >;
    readonly confirmed: {
      <TForwardOptions extends ForwardOptions<any>>(
        address: AddressString,
        forwardOptions?: TForwardOptions,
        ...args: ForwardValue[]
      ): Promise<
        InvokeReceipt<
          ContractParameter,
          TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent
        > & { readonly transaction: InvocationTransaction }
      >;
      <TForwardOptions extends ForwardOptions<any>>(
        address: AddressString,
        options?: TransactionOptions & GetOptions,
        forwardOptions?: TForwardOptions,
        ...args: ForwardValue[]
      ): Promise<
        InvokeReceipt<
          ContractParameter,
          TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent
        > & { readonly transaction: InvocationTransaction }
      >;
    };
  };
  readonly forwardForwardForwardArgs: (
    forwardOptions?: ForwardOptions,
    ...args: ForwardValue[]
  ) => [ForwardOptions<TokenEvent>, ForwardValue];
  readonly forwardForwardForwardReturn: {
    <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E>
      ? InvokeReceipt<ContractParameter, E | TokenEvent>
      : never;
    (result: ContractParameter): ContractParameter;
  };
  readonly forwardForwardConstant: (
    address: AddressString,
    forwardOptions?: ForwardOptions,
    ...args: ForwardValue[]
  ) => Promise<ContractParameter>;
  readonly forwardForwardForwardConstantArgs: (
    forwardOptions?: ForwardOptions,
    ...args: ForwardValue[]
  ) => [ForwardOptions<TokenEvent>, ForwardValue];
  readonly forwardForwardForwardConstantReturn: {
    <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E>
      ? InvokeReceipt<ContractParameter, E | TokenEvent>
      : never;
    (result: ContractParameter): ContractParameter;
  };
  readonly forwardTo: {
    (first: BigNumber, second: BigNumber, options?: TransactionOptions): Promise<
      TransactionResult<InvokeReceipt<BigNumber, TokenEvent>, InvocationTransaction>
    >;
    readonly confirmed: (
      first: BigNumber,
      second: BigNumber,
      options?: TransactionOptions & GetOptions,
    ) => Promise<InvokeReceipt<BigNumber, TokenEvent> & { readonly transaction: InvocationTransaction }>;
  };
  readonly forwardForwardToArgs: (
    first: BigNumber,
    second: BigNumber,
  ) => [ForwardOptions<TokenEvent>, ForwardValue, ForwardValue];
  readonly forwardForwardToReturn: {
    <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E>
      ? InvokeReceipt<BigNumber, E | TokenEvent>
      : never;
    (result: ContractParameter): BigNumber;
  };
  readonly forwardToConstant: (first: BigNumber, second: BigNumber) => Promise<BigNumber>;
  readonly forwardForwardToConstantArgs: (
    first: BigNumber,
    second: BigNumber,
  ) => [ForwardOptions<TokenEvent>, ForwardValue, ForwardValue];
  readonly forwardForwardToConstantReturn: {
    <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E>
      ? InvokeReceipt<BigNumber, E | TokenEvent>
      : never;
    (result: ContractParameter): BigNumber;
  };
  readonly name: () => Promise<string>;
  readonly obj: {
    (
      bar: {
        readonly baz: {
          readonly qux: string;
        };
      },
      options?: TransactionOptions,
    ): Promise<TransactionResult<InvokeReceipt<undefined, TokenEvent>, InvocationTransaction>>;
    readonly confirmed: (
      bar: {
        readonly baz: {
          readonly qux: string;
        };
      },
      options?: TransactionOptions & GetOptions,
    ) => Promise<InvokeReceipt<undefined, TokenEvent> & { readonly transaction: InvocationTransaction }>;
  };
  readonly symbol: () => Promise<string>;
  readonly totalSupply: () => Promise<BigNumber>;
  readonly transfer: {
    <TForwardOptions extends ForwardOptions<any>>(
      from: AddressString,
      to: AddressString,
      value: BigNumber,
      forwardOptions?: TForwardOptions,
      ...args: ForwardValue[]
    ): Promise<
      TransactionResult<
        InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>,
        InvocationTransaction
      >
    >;
    <TForwardOptions extends ForwardOptions<any>>(
      from: AddressString,
      to: AddressString,
      value: BigNumber,
      options?: TransactionOptions,
      forwardOptions?: TForwardOptions,
      ...args: ForwardValue[]
    ): Promise<
      TransactionResult<
        InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>,
        InvocationTransaction
      >
    >;
    readonly confirmed: {
      <TForwardOptions extends ForwardOptions<any>>(
        from: AddressString,
        to: AddressString,
        value: BigNumber,
        forwardOptions?: TForwardOptions,
        ...args: ForwardValue[]
      ): Promise<
        InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & {
          readonly transaction: InvocationTransaction;
        }
      >;
      <TForwardOptions extends ForwardOptions<any>>(
        from: AddressString,
        to: AddressString,
        value: BigNumber,
        options?: TransactionOptions & GetOptions,
        forwardOptions?: TForwardOptions,
        ...args: ForwardValue[]
      ): Promise<
        InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & {
          readonly transaction: InvocationTransaction;
        }
      >;
    };
  };
}

export interface TokenMigrationSmartContract {
  readonly balanceOf: (account: AddressString | Promise<AddressString>) => Promise<BigNumber>;
  readonly decimals: () => Promise<BigNumber>;
  readonly forward: {
    <TForwardOptions extends ForwardOptions<any>>(
      address: AddressString | Promise<AddressString>,
      forwardOptions?: TForwardOptions,
      ...args: (ForwardValue | Promise<ForwardValue>)[]
    ): Promise<
      InvokeReceipt<
        ContractParameter,
        TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent
      > & { readonly transaction: InvocationTransaction }
    >;
    <TForwardOptions extends ForwardOptions<any>>(
      address: AddressString | Promise<AddressString>,
      options?: TransactionOptions & GetOptions,
      forwardOptions?: TForwardOptions,
      ...args: (ForwardValue | Promise<ForwardValue>)[]
    ): Promise<
      InvokeReceipt<
        ContractParameter,
        TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent
      > & { readonly transaction: InvocationTransaction }
    >;
  };
  readonly forwardConstant: (
    address: AddressString | Promise<AddressString>,
    forwardOptions?: ForwardOptions,
    ...args: (ForwardValue | Promise<ForwardValue>)[]
  ) => Promise<ContractParameter>;
  readonly forwardForward: {
    <TForwardOptions extends ForwardOptions<any>>(
      address: AddressString | Promise<AddressString>,
      forwardOptions?: TForwardOptions,
      ...args: (ForwardValue | Promise<ForwardValue>)[]
    ): Promise<
      InvokeReceipt<
        ContractParameter,
        TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent
      > & { readonly transaction: InvocationTransaction }
    >;
    <TForwardOptions extends ForwardOptions<any>>(
      address: AddressString | Promise<AddressString>,
      options?: TransactionOptions & GetOptions,
      forwardOptions?: TForwardOptions,
      ...args: (ForwardValue | Promise<ForwardValue>)[]
    ): Promise<
      InvokeReceipt<
        ContractParameter,
        TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent
      > & { readonly transaction: InvocationTransaction }
    >;
  };
  readonly forwardForwardForwardArgs: (
    forwardOptions?: ForwardOptions,
    ...args: (ForwardValue | Promise<ForwardValue>)[]
  ) => [ForwardOptions<TokenEvent>, ForwardValue];
  readonly forwardForwardForwardReturn: {
    <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E>
      ? InvokeReceipt<ContractParameter, E | TokenEvent>
      : never;
    (result: ContractParameter): ContractParameter;
  };
  readonly forwardForwardConstant: (
    address: AddressString | Promise<AddressString>,
    forwardOptions?: ForwardOptions,
    ...args: (ForwardValue | Promise<ForwardValue>)[]
  ) => Promise<ContractParameter>;
  readonly forwardForwardForwardConstantArgs: (
    forwardOptions?: ForwardOptions,
    ...args: (ForwardValue | Promise<ForwardValue>)[]
  ) => [ForwardOptions<TokenEvent>, ForwardValue];
  readonly forwardForwardForwardConstantReturn: {
    <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E>
      ? InvokeReceipt<ContractParameter, E | TokenEvent>
      : never;
    (result: ContractParameter): ContractParameter;
  };
  readonly forwardTo: (
    first: BigNumber | Promise<BigNumber>,
    second: BigNumber | Promise<BigNumber>,
    options?: TransactionOptions & GetOptions,
  ) => Promise<InvokeReceipt<BigNumber, TokenEvent> & { readonly transaction: InvocationTransaction }>;
  readonly forwardForwardToArgs: (
    first: BigNumber | Promise<BigNumber>,
    second: BigNumber | Promise<BigNumber>,
  ) => [ForwardOptions<TokenEvent>, ForwardValue, ForwardValue];
  readonly forwardForwardToReturn: {
    <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E>
      ? InvokeReceipt<BigNumber, E | TokenEvent>
      : never;
    (result: ContractParameter): BigNumber;
  };
  readonly forwardToConstant: (
    first: BigNumber | Promise<BigNumber>,
    second: BigNumber | Promise<BigNumber>,
  ) => Promise<BigNumber>;
  readonly forwardForwardToConstantArgs: (
    first: BigNumber | Promise<BigNumber>,
    second: BigNumber | Promise<BigNumber>,
  ) => [ForwardOptions<TokenEvent>, ForwardValue, ForwardValue];
  readonly forwardForwardToConstantReturn: {
    <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E>
      ? InvokeReceipt<BigNumber, E | TokenEvent>
      : never;
    (result: ContractParameter): BigNumber;
  };
  readonly name: () => Promise<string>;
  readonly obj: (
    bar:
      | {
          readonly baz: {
            readonly qux: string;
          };
        }
      | Promise<{
          readonly baz: {
            readonly qux: string;
          };
        }>,
    options?: TransactionOptions & GetOptions,
  ) => Promise<InvokeReceipt<undefined, TokenEvent> & { readonly transaction: InvocationTransaction }>;
  readonly symbol: () => Promise<string>;
  readonly totalSupply: () => Promise<BigNumber>;
  readonly transfer: {
    <TForwardOptions extends ForwardOptions<any>>(
      from: AddressString | Promise<AddressString>,
      to: AddressString | Promise<AddressString>,
      value: BigNumber | Promise<BigNumber>,
      forwardOptions?: TForwardOptions,
      ...args: (ForwardValue | Promise<ForwardValue>)[]
    ): Promise<
      InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & {
        readonly transaction: InvocationTransaction;
      }
    >;
    <TForwardOptions extends ForwardOptions<any>>(
      from: AddressString | Promise<AddressString>,
      to: AddressString | Promise<AddressString>,
      value: BigNumber | Promise<BigNumber>,
      options?: TransactionOptions & GetOptions,
      forwardOptions?: TForwardOptions,
      ...args: (ForwardValue | Promise<ForwardValue>)[]
    ): Promise<
      InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & {
        readonly transaction: InvocationTransaction;
      }
    >;
  };
}
",
  },
}
`;
