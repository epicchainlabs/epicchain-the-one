// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`genSmartContractTypes NEP5 1`] = `
Object {
  "ts": "import { AddressString, Client, ContractParameter, Event, ForwardOptions, ForwardValue, GetOptions, InvocationTransaction, InvokeReceipt, SmartContract, TransactionOptions, TransactionResult } from '@neo-one/client';
import BigNumber from 'bignumber.js';


export interface TokenTransferEventParameters {
  readonly from: AddressString | undefined;
  readonly to: AddressString | undefined;
  readonly amount: BigNumber;
}
export interface TokenTransferEvent extends Event<'transfer', TokenTransferEventParameters> {}
export type TokenEvent = TokenTransferEvent

export interface TokenSmartContract<TClient extends Client = Client> extends SmartContract<TClient, TokenEvent> {
  readonly balanceOf: (account: AddressString) => Promise<BigNumber>;
  readonly decimals: () => Promise<BigNumber>;
  readonly forward: {
  <TForwardOptions extends ForwardOptions<any>>(address: AddressString, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<TransactionResult<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>, InvocationTransaction>>;  
<TForwardOptions extends ForwardOptions<any>>(address: AddressString, options?: TransactionOptions, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<TransactionResult<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>, InvocationTransaction>>;
  readonly confirmed: {
  <TForwardOptions extends ForwardOptions<any>>(address: AddressString, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;    
<TForwardOptions extends ForwardOptions<any>>(address: AddressString, options?: TransactionOptions & GetOptions, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;
}
}
  readonly forwardConstant: (address: AddressString, forwardOptions?: ForwardOptions, ...args: ForwardValue[]) => Promise<ContractParameter>;
  readonly forwardForward: {
  <TForwardOptions extends ForwardOptions<any>>(address: AddressString, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<TransactionResult<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>, InvocationTransaction>>;  
<TForwardOptions extends ForwardOptions<any>>(address: AddressString, options?: TransactionOptions, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<TransactionResult<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>, InvocationTransaction>>;
  readonly confirmed: {
  <TForwardOptions extends ForwardOptions<any>>(address: AddressString, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;    
<TForwardOptions extends ForwardOptions<any>>(address: AddressString, options?: TransactionOptions & GetOptions, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;
}
}
  readonly forwardForwardForwardArgs: (forwardOptions?: ForwardOptions, ...args: ForwardValue[]) => [ForwardOptions<TokenEvent>, ForwardValue]
  readonly forwardForwardForwardReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<ContractParameter, E | TokenEvent> : never;
  (result: ContractParameter): ContractParameter
}
  readonly forwardForwardConstant: (address: AddressString, forwardOptions?: ForwardOptions, ...args: ForwardValue[]) => Promise<ContractParameter>;
  readonly forwardForwardForwardConstantArgs: (forwardOptions?: ForwardOptions, ...args: ForwardValue[]) => [ForwardOptions<TokenEvent>, ForwardValue]
  readonly forwardForwardForwardConstantReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<ContractParameter, E | TokenEvent> : never;
  (result: ContractParameter): ContractParameter
}
  readonly forwardTo: {
  (first: BigNumber, second: BigNumber, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<BigNumber, TokenEvent>, InvocationTransaction>>;
  readonly confirmed: (first: BigNumber, second: BigNumber, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, TokenEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly forwardForwardToArgs: (first: BigNumber, second: BigNumber) => [ForwardOptions<TokenEvent>, ForwardValue, ForwardValue]
  readonly forwardForwardToReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<BigNumber, E | TokenEvent> : never;
  (result: ContractParameter): BigNumber
}
  readonly forwardToConstant: (first: BigNumber, second: BigNumber) => Promise<BigNumber>;
  readonly forwardForwardToConstantArgs: (first: BigNumber, second: BigNumber) => [ForwardOptions<TokenEvent>, ForwardValue, ForwardValue]
  readonly forwardForwardToConstantReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<BigNumber, E | TokenEvent> : never;
  (result: ContractParameter): BigNumber
}
  readonly name: () => Promise<string>;
  readonly obj: {
  (bar: {
      readonly 'baz': {
      readonly 'qux': string
    }
    }, options?: TransactionOptions): Promise<TransactionResult<InvokeReceipt<undefined, TokenEvent>, InvocationTransaction>>;
  readonly confirmed: (bar: {
      readonly 'baz': {
      readonly 'qux': string
    }
    }, options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<undefined, TokenEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly symbol: () => Promise<string>;
  readonly totalSupply: () => Promise<BigNumber>;
  readonly transfer: {
  <TForwardOptions extends ForwardOptions<any>>(from: AddressString, to: AddressString, value: BigNumber, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<TransactionResult<InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>, InvocationTransaction>>;  
<TForwardOptions extends ForwardOptions<any>>(from: AddressString, to: AddressString, value: BigNumber, options?: TransactionOptions, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<TransactionResult<InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent>, InvocationTransaction>>;
  readonly confirmed: {
  <TForwardOptions extends ForwardOptions<any>>(from: AddressString, to: AddressString, value: BigNumber, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;    
<TForwardOptions extends ForwardOptions<any>>(from: AddressString, to: AddressString, value: BigNumber, options?: TransactionOptions & GetOptions, forwardOptions?: TForwardOptions, ...args: ForwardValue[]): Promise<InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;
}
}
}


export interface TokenMigrationSmartContract {
  readonly balanceOf: (account: (AddressString | Promise<AddressString>)) => Promise<BigNumber>;
  readonly decimals: () => Promise<BigNumber>;
  readonly forward: {
  <TForwardOptions extends ForwardOptions<any>>(address: (AddressString | Promise<AddressString>), forwardOptions?: TForwardOptions, ...args: (ForwardValue | Promise<ForwardValue>)[]): Promise<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;    
<TForwardOptions extends ForwardOptions<any>>(address: (AddressString | Promise<AddressString>), options?: TransactionOptions & GetOptions, forwardOptions?: TForwardOptions, ...args: (ForwardValue | Promise<ForwardValue>)[]): Promise<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly forwardConstant: (address: (AddressString | Promise<AddressString>), forwardOptions?: ForwardOptions, ...args: (ForwardValue | Promise<ForwardValue>)[]) => Promise<ContractParameter>;
  readonly forwardForward: {
  <TForwardOptions extends ForwardOptions<any>>(address: (AddressString | Promise<AddressString>), forwardOptions?: TForwardOptions, ...args: (ForwardValue | Promise<ForwardValue>)[]): Promise<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;    
<TForwardOptions extends ForwardOptions<any>>(address: (AddressString | Promise<AddressString>), options?: TransactionOptions & GetOptions, forwardOptions?: TForwardOptions, ...args: (ForwardValue | Promise<ForwardValue>)[]): Promise<InvokeReceipt<ContractParameter, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;
}
  readonly forwardForwardForwardArgs: (forwardOptions?: ForwardOptions, ...args: (ForwardValue | Promise<ForwardValue>)[]) => [ForwardOptions<TokenEvent>, ForwardValue]
  readonly forwardForwardForwardReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<ContractParameter, E | TokenEvent> : never;
  (result: ContractParameter): ContractParameter
}
  readonly forwardForwardConstant: (address: (AddressString | Promise<AddressString>), forwardOptions?: ForwardOptions, ...args: (ForwardValue | Promise<ForwardValue>)[]) => Promise<ContractParameter>;
  readonly forwardForwardForwardConstantArgs: (forwardOptions?: ForwardOptions, ...args: (ForwardValue | Promise<ForwardValue>)[]) => [ForwardOptions<TokenEvent>, ForwardValue]
  readonly forwardForwardForwardConstantReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<ContractParameter, E | TokenEvent> : never;
  (result: ContractParameter): ContractParameter
}
  readonly forwardTo: (first: (BigNumber | Promise<BigNumber>), second: (BigNumber | Promise<BigNumber>), options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<BigNumber, TokenEvent> & { readonly transaction: InvocationTransaction}>;
  readonly forwardForwardToArgs: (first: (BigNumber | Promise<BigNumber>), second: (BigNumber | Promise<BigNumber>)) => [ForwardOptions<TokenEvent>, ForwardValue, ForwardValue]
  readonly forwardForwardToReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<BigNumber, E | TokenEvent> : never;
  (result: ContractParameter): BigNumber
}
  readonly forwardToConstant: (first: (BigNumber | Promise<BigNumber>), second: (BigNumber | Promise<BigNumber>)) => Promise<BigNumber>;
  readonly forwardForwardToConstantArgs: (first: (BigNumber | Promise<BigNumber>), second: (BigNumber | Promise<BigNumber>)) => [ForwardOptions<TokenEvent>, ForwardValue, ForwardValue]
  readonly forwardForwardToConstantReturn: {
  <T extends InvokeReceipt<ContractParameter>>(receipt: T): T extends InvokeReceipt<ContractParameter, infer E> ? InvokeReceipt<BigNumber, E | TokenEvent> : never;
  (result: ContractParameter): BigNumber
}
  readonly name: () => Promise<string>;
  readonly obj: (bar: ({
      readonly 'baz': {
      readonly 'qux': string
    }
    } | Promise<{
      readonly 'baz': {
      readonly 'qux': string
    }
    }>), options?: TransactionOptions & GetOptions) => Promise<InvokeReceipt<undefined, TokenEvent> & { readonly transaction: InvocationTransaction}>;
  readonly symbol: () => Promise<string>;
  readonly totalSupply: () => Promise<BigNumber>;
  readonly transfer: {
  <TForwardOptions extends ForwardOptions<any>>(from: (AddressString | Promise<AddressString>), to: (AddressString | Promise<AddressString>), value: (BigNumber | Promise<BigNumber>), forwardOptions?: TForwardOptions, ...args: (ForwardValue | Promise<ForwardValue>)[]): Promise<InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;    
<TForwardOptions extends ForwardOptions<any>>(from: (AddressString | Promise<AddressString>), to: (AddressString | Promise<AddressString>), value: (BigNumber | Promise<BigNumber>), options?: TransactionOptions & GetOptions, forwardOptions?: TForwardOptions, ...args: (ForwardValue | Promise<ForwardValue>)[]): Promise<InvokeReceipt<boolean, TForwardOptions extends ForwardOptions<infer T> ? TokenEvent | T : TokenEvent> & { readonly transaction: InvocationTransaction}>;
}
}
",
}
`;
